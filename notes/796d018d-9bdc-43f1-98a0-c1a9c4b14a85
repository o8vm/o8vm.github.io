:PROPERTIES:
:ID:       796d018d-9bdc-43f1-98a0-c1a9c4b14a85
:END:
#+title: buffer capture

~print_to_buffer_if_capture_used~ とそれに関わる ~OUTPUT_CAPTURE_USED~ と ~OUTPUT_CAPTURE~ とそれをセットする関数は以下。  
~println!()~ の出力をプログラムの中でキャプチャしてデバッグとかしたい時に使うぽい？
とりあえず自分の OS には使い道はなさそうなのでいったん無視。ソースは[[https://github.com/rust-lang/rust/blob/master/library/std/src/io/stdio.rs][io::stdio.rs]]

#+begin_src rust
  thread_local! {
      /// Used by the test crate to capture the output of the print macros and panics.
      static OUTPUT_CAPTURE: Cell<Option<LocalStream>> = {
          Cell::new(None)
      }
  }

  /// Flag to indicate OUTPUT_CAPTURE is used.
  ///
  /// If it is None and was never set on any thread, this flag is set to false,
  /// and OUTPUT_CAPTURE can be safely ignored on all threads, saving some time
  /// and memory registering an unused thread local.
  ///
  /// Note about memory ordering: This contains information about whether a
  /// thread local variable might be in use. Although this is a global flag, the
  /// memory ordering between threads does not matter: we only want this flag to
  /// have a consistent order between set_output_capture and print_to *within
  /// the same thread*. Within the same thread, things always have a perfectly
  /// consistent order. So Ordering::Relaxed is fine.
  static OUTPUT_CAPTURE_USED: AtomicBool = AtomicBool::new(false);

  ...

  /// Sets the thread-local output capture buffer and returns the old one.
  #[unstable(
      feature = "internal_output_capture",
      reason = "this function is meant for use in the test crate \
          and may disappear in the future",
      issue = "none"
  )]
  #[doc(hidden)]
  pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {
      if sink.is_none() && !OUTPUT_CAPTURE_USED.load(Ordering::Relaxed) {
          // OUTPUT_CAPTURE is definitely None since OUTPUT_CAPTURE_USED is false.
          return None;
      }
      OUTPUT_CAPTURE_USED.store(true, Ordering::Relaxed);
      OUTPUT_CAPTURE.with(move |slot| slot.replace(sink))
  }

...

  fn print_to_buffer_if_capture_used(args: fmt::Arguments<'_>) -> bool {
      OUTPUT_CAPTURE_USED.load(Ordering::Relaxed)
          && OUTPUT_CAPTURE.try_with(|s| {
              // Note that we completely remove a local sink to write to in case
              // our printing recursively panics/prints, so the recursive
              // panic/print goes to the global sink instead of our local sink.
              s.take().map(|w| {
                  let _ = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);
                  s.set(Some(w));
              })
          }) == Ok(Some(()))
  }
#+end_src
