:PROPERTIES:
:ID:       4aa913dc-04ef-4b94-9024-32cde21cfde9
:END:
#+title: io::Result and syscall

Rust の標準ライブラリってシステムコールの戻値は全部 [[id:c9719f16-e036-41b1-a2e2-aa3686cd1e33][ ~io::Result~ もしくは ~io::Error~ ]]にまとまってるみたい。
システムコールは io というよりはファイルシステムとは密接に結びついているとは思うが...。

なお、基本的には、Cのデータを ~cvt()~ で Rust の形式に変換していそう。

[[https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/fd.rs][unix::fs.rs]] にある ~write()~ :

#+begin_src rust
  impl FileDesc {
      pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
          let ret = cvt(unsafe {
              libc::write(
                  self.as_raw_fd(),
                  buf.as_ptr() as *const libc::c_void,
                  cmp::min(buf.len(), READ_LIMIT),
              )
          })?;
          Ok(ret as usize)
      }
#+end_src

[[https://github.com/rust-lang/rust/blob/master/library/std/src/os/unix/process.rs][process::command]] にある ~exec()~ :

#+begin_src rust
  impl CommandExt for process::Command {
      fn exec(&mut self) -> io::Error {
          // NOTE: This may *not* be safe to call after `libc::fork`, because it
          // may allocate. That may be worth fixing at some point in the future.
          self.as_inner_mut().exec(sys::process::Stdio::Inherit)
      }
#+end_src

実態は[[https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/process/process_common.rs][sys::process_common]]で実装は[[https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/process/process_unix.rs][sys::process_unix]]にある。

#+begin_src rust
  impl Command {
      pub fn exec(&mut self, default: Stdio) -> io::Error {
                ...
                      let Err(e) = self.do_exec(theirs, envp.as_ref());
      }
      ...
      unsafe fn do_exec(
          &mut self,
          stdio: ChildPipes,
          maybe_envp: Option<&CStringArray>,
      ) -> Result<!, io::Error> {
          use crate::sys::{self, cvt_r};

          if let Some(fd) = stdio.stdin.fd() {
              cvt_r(|| libc::dup2(fd, libc::STDIN_FILENO))?;
          }
          if let Some(fd) = stdio.stdout.fd() {
              cvt_r(|| libc::dup2(fd, libc::STDOUT_FILENO))?;
          }
          if let Some(fd) = stdio.stderr.fd() {
              cvt_r(|| libc::dup2(fd, libc::STDERR_FILENO))?;
          }

          #[cfg(not(target_os = "l4re"))]
          {
              if let Some(_g) = self.get_groups() {
                  //FIXME: Redox kernel does not support setgroups yet
                  #[cfg(not(target_os = "redox"))]
                  cvt(libc::setgroups(_g.len().try_into().unwrap(), _g.as_ptr()))?;
              }
              if let Some(u) = self.get_gid() {
                  cvt(libc::setgid(u as gid_t))?;
              }
              if let Some(u) = self.get_uid() {
                  // When dropping privileges from root, the `setgroups` call
                  // will remove any extraneous groups. We only drop groups
                  // if the current uid is 0 and we weren't given an explicit
                  // set of groups. If we don't call this, then even though our
                  // uid has dropped, we may still have groups that enable us to
                  // do super-user things.
                  //FIXME: Redox kernel does not support setgroups yet
                  #[cfg(not(target_os = "redox"))]
                  if libc::getuid() == 0 && self.get_groups().is_none() {
                      cvt(libc::setgroups(0, crate::ptr::null()))?;
                  }
                  cvt(libc::setuid(u as uid_t))?;
              }
          }
          if let Some(ref cwd) = *self.get_cwd() {
              cvt(libc::chdir(cwd.as_ptr()))?;
          }

          if let Some(pgroup) = self.get_pgroup() {
              cvt(libc::setpgid(0, pgroup))?;
          }

          ...

          libc::execvp(self.get_program_cstr().as_ptr(), self.get_argv().as_ptr());
          Err(io::Error::last_os_error())
      }

#+end_src
