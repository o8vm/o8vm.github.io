:PROPERTIES:
:ID:       4a3c6902-3581-4a18-b321-3b0420e66c8c
:END:
#+title: Termination Trait

どうやら[[https://doc.rust-lang.org/std/result/enum.Result.html][ ~Result~ 型]]が ~main~ のリターン型に指定できるのは[[https://doc.rust-lang.org/std/result/enum.Result.html#impl-Termination-for-Result%3CT%2C%20E%3E][ ~Termination~ ]] を実装しているから。
[[https://github.com/rust-lang/rust/blob/master/library/std/src/process.rs][実装はここ]]。

なお、 ~termination~ トレイトを実装していれば、これを実装している型は ~report()~ を使用して望みの型(std では i32)で返り値を抽出できるので、
~main~ で使用すれば、その戻り値を ~report~ で ~i32~ として、そのまま ~ExitCode` にできるというわけ。

#+begin_src rust
  pub trait Termination {
      /// Is called to get the representation of the value as status code.
      /// This status code is returned to the operating system.
      #[stable(feature = "termination_trait_lib", since = "1.61.0")]
      fn report(self) -> ExitCode;
  }
    #[stable(feature = "termination_trait_lib", since = "1.61.0")]
  impl Termination for () {
      #[inline]
      fn report(self) -> ExitCode {
          ExitCode::SUCCESS
      }
  }

  #[stable(feature = "termination_trait_lib", since = "1.61.0")]
  impl Termination for ! {
      fn report(self) -> ExitCode {
          self
      }
  }
  #[stable(feature = "termination_trait_lib", since = "1.61.0")]
  impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {
      fn report(self) -> ExitCode {
          match self {
              Ok(val) => val.report(),
              Err(err) => {
                  io::attempt_print_to_stderr(format_args_nl!("Error: {err:?}"));
                  ExitCode::FAILURE
              }
          }
      }
  }
#+end_src

#+begin_src rust
  #[lang = "start"]
  fn lang_start<T: crate::process::Termination + 'static>(
      main: fn() -> T,
      argc: isize,
      argv: *const *const u8,
      sigpipe: u8,
  ) -> isize {
      let Ok(v) = lang_start_internal(
          &move || crate::sys_common::backtrace::__rust_begin_short_backtrace(main).report().to_i32(),
#+end_src

この仕組み真似すれば、 ~no_std~ でも同じようなことをできる。
