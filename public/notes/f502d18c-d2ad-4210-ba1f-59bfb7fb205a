:PROPERTIES:
:ID:       f502d18c-d2ad-4210-ba1f-59bfb7fb205a
:END:
#+title: Futex

[[https://github.com/rust-lang/rust/blob/master/library/std/src/sys/unix/futex.rs][sys/unix/futex.rs]]が futex を利用するための実装。単なるラッパーで、大雑把にいうと、ここでは ~AtomicU32~ 型の値のアドレスを、システムコールを通してカーネル空間でもアクセスし、カーネル空間でそれをチャンネルにして sleep と wakeup ができる仕組みになっている。実態は[[id:3ed38be3-e794-4632-b120-0b478df85765][ Linux kernel 側の実装]]を参照。

したがって、futex システムコールを利用すれば、ユーザー空間からカーネル空間の sleep と wakeup のようなものを利用できるようになる。

#+begin_src rust
  pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {
      loop {
          // No need to wait if the value already changed.
          if futex.load(Relaxed) != expected {
              return true;
          }

          let r = unsafe {
                      // Use FUTEX_WAIT_BITSET rather than FUTEX_WAIT to be able to give an
                      // absolute time rather than a relative time.
                      libc::syscall(
                          libc::SYS_futex,
                          futex as *const AtomicU32,
                          libc::FUTEX_WAIT_BITSET | libc::FUTEX_PRIVATE_FLAG,
                          expected,
                          timespec.as_ref().map_or(null(), |t| t as *const libc::timespec),
                          null::<u32>(), // This argument is unused for FUTEX_WAIT_BITSET.
                          !0u32,         // A full bitmask, to make it behave like a regular FUTEX_WAIT.
                      )
          };

          match (r < 0).then(super::os::errno) {
              Some(libc::ETIMEDOUT) => return false,
              Some(libc::EINTR) => continue,
              _ => return true,
          }
      }
  }
  pub fn futex_wake(futex: &AtomicU32) -> bool {
      let ptr = futex as *const AtomicU32;
      let op = libc::FUTEX_WAKE | libc::FUTEX_PRIVATE_FLAG;
      unsafe { libc::syscall(libc::SYS_futex, ptr, op, 1) > 0 }
  }
#+end_src
