:PROPERTIES:
:ID:       900e1a53-fb93-4a79-866d-ccc1a6462b12
:ROAM_REFS: https://users.rust-lang.org/t/who-calls-lang-start/51446
:END:
#+title: Who calls lang_start

[[id:9b1f4c4a-b4a4-494f-8410-13ad36216e5e][Rust RunTime startup]] にて ~lang_start~ に引数をセットしてかつそれを呼んでいるのはどうやら rustc の[[https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/base.rs][このコード]]らしい。

#+begin_src rust
  let (start_fn, start_ty, args) = if let EntryFnType::Main { sigpipe } = entry_type {
      let start_def_id = cx.tcx().require_lang_item(LangItem::Start, None);
      let start_fn = cx.get_fn_addr(
          ty::Instance::resolve(
              cx.tcx(),
              ty::ParamEnv::reveal_all(),
              start_def_id,
              cx.tcx().intern_substs(&[main_ret_ty.into()]),
          )
          .unwrap()
          .unwrap(),
      );

      let i8_ty = cx.type_i8();
      let arg_sigpipe = bx.const_u8(sigpipe);

      let start_ty =
          cx.type_func(&[cx.val_ty(rust_main), isize_ty, i8pp_ty, i8_ty], isize_ty);
      (start_fn, start_ty, vec![rust_main, arg_argc, arg_argv, arg_sigpipe])
  } else {
      debug!("using user-defined start fn");
      let start_ty = cx.type_func(&[isize_ty, i8pp_ty], isize_ty);
      (rust_main, start_ty, vec![arg_argc, arg_argv])
  };

  let result = bx.call(start_ty, None, start_fn, &args, None);
#+end_src

コンパイラ内部でセットされているので ~[lang = "start"]~ は OS を自作する場合にもユーザープログラムのランタイムスタートアップにそのまま使えるかもしれない。

たとえば、以下のような形式が用いれるかもしれない。

#+begin_src rust
  #[lang = "start"]
  fn _main<T>(main: fn() -> T, argc: isize, argv: *const *const u8) -> ! 
#+end_src

実際に成果物を確認してみたところでは、[[id:ea78ad3f-f0be-4c7c-a193-0fd07080c775][Rust Runtime Startup in no_std]]に記載のようなった。
